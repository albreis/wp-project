version: '3'

services:

  ##
  # Web Server which runs nginx+php
  ##
  web:
    image: devgeniem/ubuntu-docker-wordpress-development:php73xd2
    ports:
      - 8080
    links:
      - db
      - redis
    volumes:
      # Sync files into this path with sync container
      - .:/var/www/project

      # Exclude theme's node_modules from the sync for performance reasons
      - /var/www/project/web/app/themes/THEMENAME/node_modules/

      # Uncomment to enable Xdebug profiling
      # - xdebug:/tmp/xdebug

      # In production uploads will be in /data/uploads/
      # This way let the container see them like in production
      - ./.docker/uploads:/var/www/uploads
    environment:
      # Small variable to tell if we are in production,testing or development
      # Don't use this in your code unless this is only option
      # We want to nearly identical codebase in production and development
      WP_ENV: development
      WP_BLOG_PUBLIC: 0

      WEB_UID: 1000
      WEB_GID: 1001

      CRON_URL: "https://asiakas.test/run-cron"

      # Set php to use redis for object cache & sessions
      PHP_SESSION_HANDLER: redis
      PHP_SESSION_REDIS_DB: 0

      # This is the default theme name WordPress will use
      WP_DEFAULT_THEME: THEMENAME

      # Use same caching solution as in production but only for a really small time
      # Default value is 1 second
      NGINX_REDIS_CACHE_TTL_DEFAULT: "1"
      NGINX_REDIS_CACHE_TTL_MAX: "1"

      # These variables can be used in nginx templates like .htpasswd
      BASIC_AUTH_USER: hello
      BASIC_AUTH_PASSWORD_HASH: world

      # These will be mapped automatically in development to jwilder/nginx-proxy
      VIRTUAL_HOST: asiakas.test
      VIRTUAL_PORT: 8080

      # This creates https certificate automatically when using gdev
      HTTPS_HOST: asiakas.test

      # Set project WP_SITEURL & WP_HOME from SERVER_NAME too
      SERVER_NAME: asiakas.test

      # Mysql details
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PWD: wordpress

      # Xdebug profiling is disabled because it slows down development
      # If you want to profile this site turn it on and use ?XDEBUG_PROFILE get parameter or cookie
      XDEBUG_ENABLE_PROFILE: 0
      # Connect to host machine for remote xdebug. The IP address is alias for host machine 127.0.0.1 by gdev
      XDEBUG_REMOTE_HOST: 10.254.254.254
      # Raise the Nginx fastcgi timeout so that we can have longer debug sessions
      # This also raises php_execution_time
      NGINX_FASTCGI_TIMEOUT: 600

      # Mail settings
      SMTP_FROM: no-reply@asiakas.test
      # This will use local mail.test server
      SMTP_HOST: 172.17.0.1

      # Google Bucket dev settings
      GOOGLE_SERVICE_ACCOUNT_EMAIL: asiakas-dev@insert-account-email.com
      GOOGLE_CLOUD_STORAGE_BUCKET_NAME: asiakas-dev
      GOOGLE_CLOUD_STORAGE_ACCESS_KEY: '{"insert-access-key-json": true}'
      # Google Maps API-Key
      GOOGLE_MAPS_APIKEY: ''

    network_mode: bridge
    extra_hosts:
      - 'asiakas.test:172.17.0.1'

  ##
  # Use basic Mariadb container for database
  ##
  db:
    image: mariadb
    volumes:
      # Make database persistent
      - /var/lib/mysql
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ROOT_PASSWORD: root
    network_mode: bridge

  ##
  # We use redis for wp object cache and php sessions
  ##
  redis:
    image: redis
    network_mode: bridge

  selenium:
    image: selenium/standalone-chrome
    ports:
      - 4444:4444
    network_mode: "bridge"
    extra_hosts:
      - 'asiakas.test:172.17.0.1'


  # --------------------------------------------
  # DISABLED CONTAINERS - UNCOMMENT TO USE THESE
  # --------------------------------------------

  ##
  # Use elasticpress plugin and elasticsearch for quicker WP_Queries in WordPress
  ##

  # elasticsearch:
  #   image: elasticsearch
  #   volumes:
  #      Make elasticsearch persistent
  #     - /usr/share/elasticsearch/data

  ##
  # nodejs container which installs and builds all frontend assets in all all themes with package.json
  ##

  # webpack-builder:
  #   image: devgeniem/node-assets-builder
  #   volumes:
  #     - .:/var/www/project
  #     - /var/www/project/web/app/themes/THEMENAME/node_modules/
  #   command: find /var/www/project/web/app/themes/ -mindepth 1 -maxdepth 1 -type d -exec node_install_and_build_webpack {} \;
  #   network_mode: bridge

  ##
  # Container for analyzing xdebug profiling
  # For Example: use yoursite.test/?XDEBUG_PROFILE to profile the front page
  ##

  # Uncomment to enable Xdebug profiling
  # webgrind:
  #   image: devgeniem/webgrind
  #   ports:
  #     - 80
  #   volumes:
  #     - xdebug:/tmp/xdebug
  #   environment:
  #     VIRTUAL_HOST: webgrind.asiakas.test
  #   network_mode: bridge

# Uncomment to enable Xdebug profiling
# volumes:
#   xdebug:
